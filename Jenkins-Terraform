pipeline {
  agent any

  parameters {
    choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Terraform Action to perform')
  }

  environment {
    DB_PASSWORD = credentials('terraform-db-password')
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/Harish6498-git/paytm-project.git'
      }
    }

    stage('Terraform Init') {
      steps {
        dir('infrastructure') {
          sh 'terraform init -input=false'
        }
      }
    }

    stage('Terraform Validate') {
      steps {
        dir('infrastructure') {
          sh 'terraform validate'
        }
      }
    }

    stage('Terraform Plan') {
      steps {
        dir('infrastructure') {
          sh '''
            terraform plan -out=tfplan \
              -var "allowed_ssh_cidr=0.0.0.0/0" \
              -var "aws_region=us-east-2" \
              -var "db_username=admin" \
              -var "db_password=$DB_PASSWORD" \
              -var "key_name=project" \
              -var "project_name=paytm"
          '''
        }
      }
    }

    stage('Terraform Apply') {
      when { expression { params.ACTION == 'apply' } }
      steps {
        timeout(time: 5, unit: 'MINUTES') {
          input message: "⚠️ Do you really want to APPLY Terraform changes?"
        }
        dir('infrastructure') {
          sh 'terraform apply -auto-approve tfplan'
        }
      }
    }

    stage('Terraform Destroy') {
      when { expression { params.ACTION == 'destroy' } }
      steps {
        timeout(time: 5, unit: 'MINUTES') {
          input message: "⚠️ Do you really want to DESTROY all resources?"
        }
        dir('infrastructure') {
          sh '''
            terraform destroy -auto-approve \
              -var "allowed_ssh_cidr=0.0.0.0/0" \
              -var "aws_region=us-east-2" \
              -var "db_username=admin" \
              -var "db_password=$DB_PASSWORD" \
              -var "key_name=project" \
              -var "project_name=paytm"
          '''
        }
      }
    }
  }

  post {
    always {
      sh 'cd infrastructure && terraform show || true'
    }
    failure {
      echo "❌ Terraform pipeline failed"
    }
    success {
      echo "✅ Terraform ${params.ACTION} completed successfully"
    }
  }
}
